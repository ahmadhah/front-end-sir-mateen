{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport { useMemo } from 'react';\nexport const DOTS = '...';\nconst range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({\n    length\n  }, (_, idx) => idx + start);\n};\nexport const usePagination = _ref => {\n  _s();\n  let {\n    totalCount,\n    pageSize,\n    siblingCount = 1,\n    currentPage\n  } = _ref;\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize);\n\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n    const totalPageNumbers = siblingCount + 5;\n\n    /*\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n\n    /*\r\n      We do not want to show dots if there is only one position left \r\n      after/before the left/right page count as that would lead to a change if our Pagination\r\n      component size which we do not want\r\n    */\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n      return [...leftRange, DOTS, totalPageCount];\n    }\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n};\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");","map":{"version":3,"names":["React","useMemo","DOTS","range","start","end","length","Array","from","_","idx","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/src/_helper/paginationHook/usePagination.js"],"sourcesContent":["import React from 'react';\r\nimport { useMemo } from 'react';\r\n\r\nexport const DOTS = '...';\r\n\r\nconst range = (start, end) => {\r\n  let length = end - start + 1;\r\n  return Array.from({ length }, (_, idx) => idx + start);\r\n};\r\n\r\nexport const usePagination = ({\r\n  totalCount,\r\n  pageSize,\r\n  siblingCount = 1,\r\n  currentPage\r\n}) => {\r\n  const paginationRange = useMemo(() => {\r\n    const totalPageCount = Math.ceil(totalCount / pageSize);\r\n\r\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\r\n    const totalPageNumbers = siblingCount + 5;\r\n\r\n    /*\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\r\n    if (totalPageNumbers >= totalPageCount) {\r\n      return range(1, totalPageCount);\r\n    }\r\n\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(\r\n      currentPage + siblingCount,\r\n      totalPageCount\r\n    );\r\n\r\n    /*\r\n      We do not want to show dots if there is only one position left \r\n      after/before the left/right page count as that would lead to a change if our Pagination\r\n      component size which we do not want\r\n    */\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    if (!shouldShowLeftDots && shouldShowRightDots) {\r\n      let leftItemCount = 3 + 2 * siblingCount;\r\n      let leftRange = range(1, leftItemCount);\r\n\r\n      return [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    if (shouldShowLeftDots && !shouldShowRightDots) {\r\n      let rightItemCount = 3 + 2 * siblingCount;\r\n      let rightRange = range(\r\n        totalPageCount - rightItemCount + 1,\r\n        totalPageCount\r\n      );\r\n      return [firstPageIndex, DOTS, ...rightRange];\r\n    }\r\n\r\n    if (shouldShowLeftDots && shouldShowRightDots) {\r\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n    }\r\n  }, [totalCount, pageSize, siblingCount, currentPage]);\r\n\r\n  return paginationRange;\r\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,OAAO;AAE/B,OAAO,MAAMC,IAAI,GAAG,KAAK;AAEzB,MAAMC,KAAK,GAAG,CAACC,KAAK,EAAEC,GAAG,KAAK;EAC5B,IAAIC,MAAM,GAAGD,GAAG,GAAGD,KAAK,GAAG,CAAC;EAC5B,OAAOG,KAAK,CAACC,IAAI,CAAC;IAAEF;EAAO,CAAC,EAAE,CAACG,CAAC,EAAEC,GAAG,KAAKA,GAAG,GAAGN,KAAK,CAAC;AACxD,CAAC;AAED,OAAO,MAAMO,aAAa,GAAG,QAKvB;EAAA;EAAA,IALwB;IAC5BC,UAAU;IACVC,QAAQ;IACRC,YAAY,GAAG,CAAC;IAChBC;EACF,CAAC;EACC,MAAMC,eAAe,GAAGf,OAAO,CAAC,MAAM;IACpC,MAAMgB,cAAc,GAAGC,IAAI,CAACC,IAAI,CAACP,UAAU,GAAGC,QAAQ,CAAC;;IAEvD;IACA,MAAMO,gBAAgB,GAAGN,YAAY,GAAG,CAAC;;IAEzC;AACJ;AACA;AACA;IACI,IAAIM,gBAAgB,IAAIH,cAAc,EAAE;MACtC,OAAOd,KAAK,CAAC,CAAC,EAAEc,cAAc,CAAC;IACjC;IAEA,MAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAG,CAACP,WAAW,GAAGD,YAAY,EAAE,CAAC,CAAC;IAChE,MAAMS,iBAAiB,GAAGL,IAAI,CAACM,GAAG,CAChCT,WAAW,GAAGD,YAAY,EAC1BG,cAAc,CACf;;IAED;AACJ;AACA;AACA;AACA;IACI,MAAMQ,kBAAkB,GAAGJ,gBAAgB,GAAG,CAAC;IAC/C,MAAMK,mBAAmB,GAAGH,iBAAiB,GAAGN,cAAc,GAAG,CAAC;IAElE,MAAMU,cAAc,GAAG,CAAC;IACxB,MAAMC,aAAa,GAAGX,cAAc;IAEpC,IAAI,CAACQ,kBAAkB,IAAIC,mBAAmB,EAAE;MAC9C,IAAIG,aAAa,GAAG,CAAC,GAAG,CAAC,GAAGf,YAAY;MACxC,IAAIgB,SAAS,GAAG3B,KAAK,CAAC,CAAC,EAAE0B,aAAa,CAAC;MAEvC,OAAO,CAAC,GAAGC,SAAS,EAAE5B,IAAI,EAAEe,cAAc,CAAC;IAC7C;IAEA,IAAIQ,kBAAkB,IAAI,CAACC,mBAAmB,EAAE;MAC9C,IAAIK,cAAc,GAAG,CAAC,GAAG,CAAC,GAAGjB,YAAY;MACzC,IAAIkB,UAAU,GAAG7B,KAAK,CACpBc,cAAc,GAAGc,cAAc,GAAG,CAAC,EACnCd,cAAc,CACf;MACD,OAAO,CAACU,cAAc,EAAEzB,IAAI,EAAE,GAAG8B,UAAU,CAAC;IAC9C;IAEA,IAAIP,kBAAkB,IAAIC,mBAAmB,EAAE;MAC7C,IAAIO,WAAW,GAAG9B,KAAK,CAACkB,gBAAgB,EAAEE,iBAAiB,CAAC;MAC5D,OAAO,CAACI,cAAc,EAAEzB,IAAI,EAAE,GAAG+B,WAAW,EAAE/B,IAAI,EAAE0B,aAAa,CAAC;IACpE;EACF,CAAC,EAAE,CAAChB,UAAU,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,WAAW,CAAC,CAAC;EAErD,OAAOC,eAAe;AACxB,CAAC;AAAC,GA5DWL,aAAa"},"metadata":{},"sourceType":"module"}