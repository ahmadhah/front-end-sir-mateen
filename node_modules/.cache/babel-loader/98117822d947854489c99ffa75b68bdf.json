{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadhannan/Downloads/fgfgfg/src/_metronic/layout/core/MetronicSplashScreen.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetronicSplashScreenContext = /*#__PURE__*/createContext(undefined);\nconst MetronicSplashScreenProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [count, setCount] = useState(0);\n  let visible = count > 0;\n  useEffect(() => {\n    const splashScreen = document.getElementById('splash-screen');\n\n    // Show SplashScreen\n    if (splashScreen && visible) {\n      splashScreen.classList.remove('hidden');\n      return () => {\n        splashScreen.classList.add('hidden');\n      };\n    }\n\n    // Hide SplashScreen\n    let timeout;\n    if (splashScreen && !visible) {\n      timeout = window.setTimeout(() => {\n        splashScreen.classList.add('hidden');\n      }, 3000);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [visible]);\n  return /*#__PURE__*/_jsxDEV(MetronicSplashScreenContext.Provider, {\n    value: setCount,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(MetronicSplashScreenProvider, \"/xL7qdScToREtqzbt5GZ1kHtYjQ=\");\n_c = MetronicSplashScreenProvider;\nconst LayoutSplashScreen = _ref2 => {\n  _s2();\n  let {\n    visible = true\n  } = _ref2;\n  // Everything are ready - remove splashscreen\n  const setCount = useContext(MetronicSplashScreenContext);\n  useEffect(() => {\n    if (!visible) {\n      return;\n    }\n    if (setCount) {\n      setCount(prev => {\n        return prev + 1;\n      });\n    }\n    return () => {\n      if (setCount) {\n        setCount(prev => {\n          return prev - 1;\n        });\n      }\n    };\n  }, [setCount, visible]);\n  return null;\n};\n_s2(LayoutSplashScreen, \"7vsTmQ5v/VbQFP1+FvIbjUJDPow=\");\n_c2 = LayoutSplashScreen;\nexport { MetronicSplashScreenProvider, LayoutSplashScreen };\nvar _c, _c2;\n$RefreshReg$(_c, \"MetronicSplashScreenProvider\");\n$RefreshReg$(_c2, \"LayoutSplashScreen\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","MetronicSplashScreenContext","undefined","MetronicSplashScreenProvider","children","count","setCount","visible","splashScreen","document","getElementById","classList","remove","add","timeout","window","setTimeout","clearTimeout","LayoutSplashScreen","prev"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/src/_metronic/layout/core/MetronicSplashScreen.tsx"],"sourcesContent":["import React, {\r\n  FC,\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  SetStateAction,\r\n  Dispatch,\r\n} from 'react'\r\n\r\nconst MetronicSplashScreenContext = createContext<Dispatch<SetStateAction<number>> | undefined>(\r\n  undefined\r\n)\r\n\r\nconst MetronicSplashScreenProvider: FC = ({children}) => {\r\n  const [count, setCount] = useState(0)\r\n  let visible = count > 0\r\n\r\n  useEffect(() => {\r\n    const splashScreen = document.getElementById('splash-screen')\r\n\r\n    // Show SplashScreen\r\n    if (splashScreen && visible) {\r\n      splashScreen.classList.remove('hidden')\r\n\r\n      return () => {\r\n        splashScreen.classList.add('hidden')\r\n      }\r\n    }\r\n\r\n    // Hide SplashScreen\r\n    let timeout: number\r\n    if (splashScreen && !visible) {\r\n      timeout = window.setTimeout(() => {\r\n        splashScreen.classList.add('hidden')\r\n      }, 3000)\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timeout)\r\n    }\r\n  }, [visible])\r\n\r\n  return (\r\n    <MetronicSplashScreenContext.Provider value={setCount}>\r\n      {children}\r\n    </MetronicSplashScreenContext.Provider>\r\n  )\r\n}\r\n\r\nconst LayoutSplashScreen: FC<{visible?: boolean}> = ({visible = true}) => {\r\n  // Everything are ready - remove splashscreen\r\n  const setCount = useContext(MetronicSplashScreenContext)\r\n\r\n  useEffect(() => {\r\n    if (!visible) {\r\n      return\r\n    }\r\n\r\n    if (setCount) {\r\n      setCount((prev) => {\r\n        return prev + 1\r\n      })\r\n    }\r\n\r\n    return () => {\r\n      if (setCount) {\r\n        setCount((prev) => {\r\n          return prev - 1\r\n        })\r\n      }\r\n    }\r\n  }, [setCount, visible])\r\n\r\n  return null\r\n}\r\n\r\nexport {MetronicSplashScreenProvider, LayoutSplashScreen}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAEVC,aAAa,EACbC,UAAU,EACVC,QAAQ,EACRC,SAAS,QAGJ,OAAO;AAAA;AAEd,MAAMC,2BAA2B,gBAAGJ,aAAa,CAC/CK,SAAS,CACV;AAED,MAAMC,4BAAgC,GAAG,QAAgB;EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC;EAClD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACrC,IAAIQ,OAAO,GAAGF,KAAK,GAAG,CAAC;EAEvBL,SAAS,CAAC,MAAM;IACd,MAAMQ,YAAY,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;;IAE7D;IACA,IAAIF,YAAY,IAAID,OAAO,EAAE;MAC3BC,YAAY,CAACG,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;MAEvC,OAAO,MAAM;QACXJ,YAAY,CAACG,SAAS,CAACE,GAAG,CAAC,QAAQ,CAAC;MACtC,CAAC;IACH;;IAEA;IACA,IAAIC,OAAe;IACnB,IAAIN,YAAY,IAAI,CAACD,OAAO,EAAE;MAC5BO,OAAO,GAAGC,MAAM,CAACC,UAAU,CAAC,MAAM;QAChCR,YAAY,CAACG,SAAS,CAACE,GAAG,CAAC,QAAQ,CAAC;MACtC,CAAC,EAAE,IAAI,CAAC;IACV;IAEA,OAAO,MAAM;MACXI,YAAY,CAACH,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACP,OAAO,CAAC,CAAC;EAEb,oBACE,QAAC,2BAA2B,CAAC,QAAQ;IAAC,KAAK,EAAED,QAAS;IAAA,UACnDF;EAAQ;IAAA;IAAA;IAAA;EAAA,QAC4B;AAE3C,CAAC;AAAA,GAlCKD,4BAAgC;AAAA,KAAhCA,4BAAgC;AAoCtC,MAAMe,kBAA2C,GAAG,SAAsB;EAAA;EAAA,IAArB;IAACX,OAAO,GAAG;EAAI,CAAC;EACnE;EACA,MAAMD,QAAQ,GAAGR,UAAU,CAACG,2BAA2B,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,OAAO,EAAE;MACZ;IACF;IAEA,IAAID,QAAQ,EAAE;MACZA,QAAQ,CAAEa,IAAI,IAAK;QACjB,OAAOA,IAAI,GAAG,CAAC;MACjB,CAAC,CAAC;IACJ;IAEA,OAAO,MAAM;MACX,IAAIb,QAAQ,EAAE;QACZA,QAAQ,CAAEa,IAAI,IAAK;UACjB,OAAOA,IAAI,GAAG,CAAC;QACjB,CAAC,CAAC;MACJ;IACF,CAAC;EACH,CAAC,EAAE,CAACb,QAAQ,EAAEC,OAAO,CAAC,CAAC;EAEvB,OAAO,IAAI;AACb,CAAC;AAAA,IAzBKW,kBAA2C;AAAA,MAA3CA,kBAA2C;AA2BjD,SAAQf,4BAA4B,EAAEe,kBAAkB;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}