{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadhannan/Downloads/fgfgfg/src/_helper/partials/widgets/graphs/Graph1.tsx\",\n  _s = $RefreshSig$();\n/* eslint-disable */\nimport React, { useEffect, useRef } from 'react';\nimport ApexCharts from 'apexcharts';\nimport { getCSSVariableValue } from '../../../../_metronic/assets/ts/_utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Graph1 = _ref => {\n  _s();\n  let {\n    chartColor,\n    chartHeight,\n    strokeColor,\n    chartData\n  } = _ref;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!chartRef.current) {\n      return;\n    }\n    const chart = new ApexCharts(chartRef.current, chartOptions(chartHeight, chartColor, strokeColor, chartData));\n    if (chart) {\n      chart.render();\n    }\n    return () => {\n      if (chart) {\n        chart.destroy();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chartRef]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartRef,\n      className: `mixed-widget-2-chart card-rounded-bottom bg-${chartColor}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Graph1, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = Graph1;\nconst chartOptions = (chartHeight, chartColor, strokeColor, chartData) => {\n  const labelColor = getCSSVariableValue('--bs-gray-500');\n  const borderColor = getCSSVariableValue('--bs-gray-200');\n  const color = getCSSVariableValue('--bs-' + chartColor);\n  return {\n    series: [{\n      name: 'Net Profit',\n      data: chartData\n    }],\n    chart: {\n      fontFamily: 'inherit',\n      type: 'area',\n      height: chartHeight,\n      toolbar: {\n        show: false\n      },\n      zoom: {\n        enabled: false\n      },\n      sparkline: {\n        enabled: true\n      },\n      dropShadow: {\n        enabled: true,\n        enabledOnSeries: undefined,\n        top: 5,\n        left: 0,\n        blur: 3,\n        color: strokeColor,\n        opacity: 0.5\n      }\n    },\n    plotOptions: {},\n    legend: {\n      show: false\n    },\n    dataLabels: {\n      enabled: false\n    },\n    fill: {\n      type: 'solid',\n      opacity: 0\n    },\n    stroke: {\n      curve: 'smooth',\n      show: true,\n      width: 3,\n      colors: [strokeColor]\n    },\n    xaxis: {\n      categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        show: false,\n        style: {\n          colors: labelColor,\n          fontSize: '12px'\n        }\n      },\n      crosshairs: {\n        show: false,\n        position: 'front',\n        stroke: {\n          color: borderColor,\n          width: 1,\n          dashArray: 3\n        }\n      }\n    },\n    yaxis: {\n      min: 0,\n      max: 80,\n      labels: {\n        show: false,\n        style: {\n          colors: labelColor,\n          fontSize: '12px'\n        }\n      }\n    },\n    states: {\n      normal: {\n        filter: {\n          type: 'none',\n          value: 0\n        }\n      },\n      hover: {\n        filter: {\n          type: 'none',\n          value: 0\n        }\n      },\n      active: {\n        allowMultipleDataPointsSelection: false,\n        filter: {\n          type: 'none',\n          value: 0\n        }\n      }\n    },\n    tooltip: {\n      style: {\n        fontSize: '12px'\n      },\n      y: {\n        formatter: function (val) {\n          return '$' + val + ' thousands';\n        }\n      },\n      marker: {\n        show: false\n      }\n    },\n    colors: ['transparent'],\n    markers: {\n      colors: [color],\n      strokeColors: [strokeColor],\n      strokeWidth: 3\n    }\n  };\n};\nexport { Graph1 };\nvar _c;\n$RefreshReg$(_c, \"Graph1\");","map":{"version":3,"names":["React","useEffect","useRef","ApexCharts","getCSSVariableValue","Graph1","chartColor","chartHeight","strokeColor","chartData","chartRef","current","chart","chartOptions","render","destroy","labelColor","borderColor","color","series","name","data","fontFamily","type","height","toolbar","show","zoom","enabled","sparkline","dropShadow","enabledOnSeries","undefined","top","left","blur","opacity","plotOptions","legend","dataLabels","fill","stroke","curve","width","colors","xaxis","categories","axisBorder","axisTicks","labels","style","fontSize","crosshairs","position","dashArray","yaxis","min","max","states","normal","filter","value","hover","active","allowMultipleDataPointsSelection","tooltip","y","formatter","val","marker","markers","strokeColors","strokeWidth"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/src/_helper/partials/widgets/graphs/Graph1.tsx"],"sourcesContent":["/* eslint-disable */\r\nimport React, { useEffect, useRef } from 'react'\r\nimport ApexCharts, { ApexOptions } from 'apexcharts'\r\nimport { getCSSVariableValue } from '../../../../_metronic/assets/ts/_utils'\r\n\r\n\r\ntype Props = {\r\n  chartColor: string\r\n  strokeColor: string\r\n  chartHeight: string\r\n  chartData: Array<number>\r\n}\r\n\r\n\r\nconst Graph1: React.FC<Props> = ({ chartColor, chartHeight, strokeColor, chartData }) => {\r\n\r\n\r\n  const chartRef = useRef<HTMLDivElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!chartRef.current) {\r\n      return\r\n    }\r\n\r\n    const chart = new ApexCharts(\r\n      chartRef.current,\r\n      chartOptions(chartHeight, chartColor, strokeColor, chartData)\r\n    )\r\n    if (chart) {\r\n      chart.render()\r\n    }\r\n\r\n    return () => {\r\n      if (chart) {\r\n        chart.destroy()\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [chartRef])\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Chart */}\r\n      <div\r\n        ref={chartRef}\r\n        className={`mixed-widget-2-chart card-rounded-bottom bg-${chartColor}`}\r\n      ></div>\r\n      {/* end::Chart */}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst chartOptions = (\r\n  chartHeight: string,\r\n  chartColor: string,\r\n  strokeColor: string,\r\n  chartData: Array<number>\r\n  ): ApexOptions => {\r\n  const labelColor = getCSSVariableValue('--bs-gray-500')\r\n  const borderColor = getCSSVariableValue('--bs-gray-200')\r\n  const color = getCSSVariableValue('--bs-' + chartColor)\r\n\r\n  return {\r\n    series: [\r\n      {\r\n        name: 'Net Profit',\r\n        data: chartData,\r\n      },\r\n    ],\r\n    chart: {\r\n      fontFamily: 'inherit',\r\n      type: 'area',\r\n      height: chartHeight,\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n      zoom: {\r\n        enabled: false,\r\n      },\r\n      sparkline: {\r\n        enabled: true,\r\n      },\r\n      dropShadow: {\r\n        enabled: true,\r\n        enabledOnSeries: undefined,\r\n        top: 5,\r\n        left: 0,\r\n        blur: 3,\r\n        color: strokeColor,\r\n        opacity: 0.5,\r\n      },\r\n    },\r\n    plotOptions: {},\r\n    legend: {\r\n      show: false,\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    fill: {\r\n      type: 'solid',\r\n      opacity: 0,\r\n    },\r\n    stroke: {\r\n      curve: 'smooth',\r\n      show: true,\r\n      width: 3,\r\n      colors: [strokeColor],\r\n    },\r\n    xaxis: {\r\n      categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\r\n      axisBorder: {\r\n        show: false,\r\n      },\r\n      axisTicks: {\r\n        show: false,\r\n      },\r\n      labels: {\r\n        show: false,\r\n        style: {\r\n          colors: labelColor,\r\n          fontSize: '12px',\r\n        },\r\n      },\r\n      crosshairs: {\r\n        show: false,\r\n        position: 'front',\r\n        stroke: {\r\n          color: borderColor,\r\n          width: 1,\r\n          dashArray: 3,\r\n        },\r\n      },\r\n    },\r\n    yaxis: {\r\n      min: 0,\r\n      max: 80,\r\n      labels: {\r\n        show: false,\r\n        style: {\r\n          colors: labelColor,\r\n          fontSize: '12px',\r\n        },\r\n      },\r\n    },\r\n    states: {\r\n      normal: {\r\n        filter: {\r\n          type: 'none',\r\n          value: 0,\r\n        },\r\n      },\r\n      hover: {\r\n        filter: {\r\n          type: 'none',\r\n          value: 0,\r\n        },\r\n      },\r\n      active: {\r\n        allowMultipleDataPointsSelection: false,\r\n        filter: {\r\n          type: 'none',\r\n          value: 0,\r\n        },\r\n      },\r\n    },\r\n    tooltip: {\r\n      style: {\r\n        fontSize: '12px',\r\n      },\r\n      y: {\r\n        formatter: function (val) {\r\n          return '$' + val + ' thousands'\r\n        },\r\n      },\r\n      marker: {\r\n        show: false,\r\n      },\r\n    },\r\n    colors: ['transparent'],\r\n    markers: {\r\n      colors: [color],\r\n      strokeColors: [strokeColor],\r\n      strokeWidth: 3,\r\n    },\r\n  }\r\n}\r\n\r\n\r\n\r\nexport {Graph1}"],"mappings":"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"},"metadata":{},"sourceType":"module"}