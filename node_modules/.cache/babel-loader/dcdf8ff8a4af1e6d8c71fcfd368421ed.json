{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadhannan/Downloads/fgfgfg/src/_metronic/layout/core/LayoutProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { DefaultLayoutConfig } from './DefaultLayoutConfig';\nimport { getEmptyCssClasses, getEmptyCSSVariables, getEmptyHTMLAttributes, LayoutSetup } from './LayoutSetup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LayoutContext = /*#__PURE__*/createContext({\n  config: DefaultLayoutConfig,\n  classes: getEmptyCssClasses(),\n  attributes: getEmptyHTMLAttributes(),\n  cssVariables: getEmptyCSSVariables(),\n  setLayout: config => {}\n});\nconst enableSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen');\n  if (splashScreen) {\n    splashScreen.style.setProperty('display', 'flex');\n  }\n};\nconst disableSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen');\n  if (splashScreen) {\n    splashScreen.style.setProperty('display', 'none');\n  }\n};\nconst LayoutProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [config, setConfig] = useState(LayoutSetup.config);\n  const [classes, setClasses] = useState(LayoutSetup.classes);\n  const [attributes, setAttributes] = useState(LayoutSetup.attributes);\n  const [cssVariables, setCSSVariables] = useState(LayoutSetup.cssVariables);\n  const setLayout = _themeConfig => {\n    enableSplashScreen();\n    const bodyClasses = Array.from(document.body.classList);\n    bodyClasses.forEach(cl => document.body.classList.remove(cl));\n    LayoutSetup.updatePartialConfig(_themeConfig);\n    setConfig(Object.assign({}, LayoutSetup.config));\n    setClasses(LayoutSetup.classes);\n    setAttributes(LayoutSetup.attributes);\n    setCSSVariables(LayoutSetup.cssVariables);\n    setTimeout(() => {\n      disableSplashScreen();\n    }, 500);\n  };\n  const value = {\n    config,\n    classes,\n    attributes,\n    cssVariables,\n    setLayout\n  };\n  useEffect(() => {\n    disableSplashScreen();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LayoutContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n_s(LayoutProvider, \"v9W/VJPDsgTcdQRHrWCbNvCfFmk=\");\n_c = LayoutProvider;\nexport { LayoutContext, LayoutProvider };\nexport function useLayout() {\n  _s2();\n  return useContext(LayoutContext);\n}\n_s2(useLayout, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"LayoutProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","DefaultLayoutConfig","getEmptyCssClasses","getEmptyCSSVariables","getEmptyHTMLAttributes","LayoutSetup","LayoutContext","config","classes","attributes","cssVariables","setLayout","enableSplashScreen","splashScreen","document","getElementById","style","setProperty","disableSplashScreen","LayoutProvider","children","setConfig","setClasses","setAttributes","setCSSVariables","_themeConfig","bodyClasses","Array","from","body","classList","forEach","cl","remove","updatePartialConfig","Object","assign","setTimeout","value","useLayout"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/src/_metronic/layout/core/LayoutProvider.tsx"],"sourcesContent":["import React, {createContext, useContext, useState, useEffect} from 'react'\r\nimport {DefaultLayoutConfig} from './DefaultLayoutConfig'\r\nimport {\r\n  getEmptyCssClasses,\r\n  getEmptyCSSVariables,\r\n  getEmptyHTMLAttributes,\r\n  LayoutSetup,\r\n} from './LayoutSetup'\r\nimport {\r\n  ILayout,\r\n  ILayoutCSSVariables,\r\n  ILayoutCSSClasses,\r\n  ILayoutHTMLAttributes,\r\n} from './LayoutModels'\r\n\r\nexport interface LayoutContextModel {\r\n  config: ILayout\r\n  classes: ILayoutCSSClasses\r\n  attributes: ILayoutHTMLAttributes\r\n  cssVariables: ILayoutCSSVariables\r\n  setLayout: (config: LayoutSetup) => void\r\n}\r\n\r\nconst LayoutContext = createContext<LayoutContextModel>({\r\n  config: DefaultLayoutConfig,\r\n  classes: getEmptyCssClasses(),\r\n  attributes: getEmptyHTMLAttributes(),\r\n  cssVariables: getEmptyCSSVariables(),\r\n  setLayout: (config: LayoutSetup) => {},\r\n})\r\n\r\nconst enableSplashScreen = () => {\r\n  const splashScreen = document.getElementById('splash-screen')\r\n  if (splashScreen) {\r\n    splashScreen.style.setProperty('display', 'flex')\r\n  }\r\n}\r\n\r\nconst disableSplashScreen = () => {\r\n  const splashScreen = document.getElementById('splash-screen')\r\n  if (splashScreen) {\r\n    splashScreen.style.setProperty('display', 'none')\r\n  }\r\n}\r\n\r\nconst LayoutProvider: React.FC = ({children}) => {\r\n  const [config, setConfig] = useState(LayoutSetup.config)\r\n  const [classes, setClasses] = useState(LayoutSetup.classes)\r\n  const [attributes, setAttributes] = useState(LayoutSetup.attributes)\r\n  const [cssVariables, setCSSVariables] = useState(LayoutSetup.cssVariables)\r\n  const setLayout = (_themeConfig: Partial<ILayout>) => {\r\n    enableSplashScreen()\r\n    const bodyClasses = Array.from(document.body.classList)\r\n    bodyClasses.forEach((cl) => document.body.classList.remove(cl))\r\n    LayoutSetup.updatePartialConfig(_themeConfig)\r\n    setConfig(Object.assign({}, LayoutSetup.config))\r\n    setClasses(LayoutSetup.classes)\r\n    setAttributes(LayoutSetup.attributes)\r\n    setCSSVariables(LayoutSetup.cssVariables)\r\n    setTimeout(() => {\r\n      disableSplashScreen()\r\n    }, 500)\r\n  }\r\n  const value: LayoutContextModel = {\r\n    config,\r\n    classes,\r\n    attributes,\r\n    cssVariables,\r\n    setLayout,\r\n  }\r\n\r\n  useEffect(() => {\r\n    disableSplashScreen()\r\n  }, [])\r\n\r\n  return <LayoutContext.Provider value={value}>{children}</LayoutContext.Provider>\r\n}\r\n\r\nexport {LayoutContext, LayoutProvider}\r\n\r\nexport function useLayout() {\r\n  return useContext(LayoutContext)\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}