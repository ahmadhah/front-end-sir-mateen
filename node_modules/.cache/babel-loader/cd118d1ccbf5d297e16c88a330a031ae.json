{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadhannan/Downloads/fgfgfg/src/app/modules/auth/redux/AuthInit.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect, useState } from 'react';\nimport { shallowEqual, useSelector, connect, useDispatch } from 'react-redux';\nimport { LayoutSplashScreen } from '../../../../_metronic/layout/core';\nimport * as auth from './AuthRedux';\nimport { getUserByToken } from './AuthCRUD';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst mapState = state => ({\n  auth: state.auth\n});\nconst connector = connect(mapState, auth.actions);\nconst AuthInit = props => {\n  _s();\n  const didRequest = useRef(false);\n  const dispatch = useDispatch();\n  const [showSplashScreen, setShowSplashScreen] = useState(true);\n  const accessToken = useSelector(_ref => {\n    let {\n      auth\n    } = _ref;\n    return auth.accessToken;\n  }, shallowEqual);\n\n  // We should request user by authToken before rendering the application\n  useEffect(() => {\n    const requestUser = async () => {\n      try {\n        if (!didRequest.current) {\n          const {\n            data: user\n          } = await getUserByToken();\n          dispatch(props.fulfillUser(user));\n        }\n      } catch (error) {\n        console.error(error);\n        if (!didRequest.current) {\n          dispatch(props.logout());\n        }\n      } finally {\n        setShowSplashScreen(false);\n      }\n      return () => didRequest.current = true;\n    };\n    if (accessToken) {\n      requestUser();\n    } else {\n      dispatch(props.logout());\n      setShowSplashScreen(false);\n    }\n    // eslint-disable-next-line\n  }, []);\n  return showSplashScreen ? /*#__PURE__*/_jsxDEV(LayoutSplashScreen, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 29\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.children\n  }, void 0, false);\n};\n_s(AuthInit, \"QZZ6ZvjLpFInhk9rFw5xQoMZLJU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = AuthInit;\nexport default _c2 = connector(AuthInit);\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthInit\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["useRef","useEffect","useState","shallowEqual","useSelector","connect","useDispatch","LayoutSplashScreen","auth","getUserByToken","mapState","state","connector","actions","AuthInit","props","didRequest","dispatch","showSplashScreen","setShowSplashScreen","accessToken","requestUser","current","data","user","fulfillUser","error","console","logout","children"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/src/app/modules/auth/redux/AuthInit.tsx"],"sourcesContent":["import {FC, useRef, useEffect, useState} from 'react'\r\nimport {shallowEqual, useSelector, connect, useDispatch, ConnectedProps} from 'react-redux'\r\nimport {LayoutSplashScreen} from '../../../../_metronic/layout/core'\r\nimport * as auth from './AuthRedux'\r\nimport {getUserByToken} from './AuthCRUD'\r\nimport {RootState} from '../../../../setup'\r\n\r\nconst mapState = (state: RootState) => ({auth: state.auth})\r\nconst connector = connect(mapState, auth.actions)\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\nconst AuthInit: FC<PropsFromRedux> = (props) => {\r\n  const didRequest = useRef(false)\r\n  const dispatch = useDispatch()\r\n  const [showSplashScreen, setShowSplashScreen] = useState(true)\r\n  const accessToken = useSelector<RootState>(({auth}) => auth.accessToken, shallowEqual)\r\n\r\n  // We should request user by authToken before rendering the application\r\n  useEffect(() => {\r\n    const requestUser = async () => {\r\n      try {\r\n        if (!didRequest.current) {\r\n          const {data: user} = await getUserByToken()\r\n          dispatch(props.fulfillUser(user))\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n        if (!didRequest.current) {\r\n          dispatch(props.logout())\r\n        }\r\n      } finally {\r\n        setShowSplashScreen(false)\r\n      }\r\n\r\n      return () => (didRequest.current = true)\r\n    }\r\n\r\n    if (accessToken) {\r\n      requestUser()\r\n    } else {\r\n      dispatch(props.logout())\r\n      setShowSplashScreen(false)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return showSplashScreen ? <LayoutSplashScreen /> : <>{props.children}</>\r\n}\r\n\r\nexport default connector(AuthInit)\r\n"],"mappings":";;AAAA,SAAYA,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACrD,SAAQC,YAAY,EAAEC,WAAW,EAAEC,OAAO,EAAEC,WAAW,QAAuB,aAAa;AAC3F,SAAQC,kBAAkB,QAAO,mCAAmC;AACpE,OAAO,KAAKC,IAAI,MAAM,aAAa;AACnC,SAAQC,cAAc,QAAO,YAAY;AAAA;AAAA;AAGzC,MAAMC,QAAQ,GAAIC,KAAgB,KAAM;EAACH,IAAI,EAAEG,KAAK,CAACH;AAAI,CAAC,CAAC;AAC3D,MAAMI,SAAS,GAAGP,OAAO,CAACK,QAAQ,EAAEF,IAAI,CAACK,OAAO,CAAC;AAGjD,MAAMC,QAA4B,GAAIC,KAAK,IAAK;EAAA;EAC9C,MAAMC,UAAU,GAAGhB,MAAM,CAAC,KAAK,CAAC;EAChC,MAAMiB,QAAQ,GAAGX,WAAW,EAAE;EAC9B,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAMkB,WAAW,GAAGhB,WAAW,CAAY;IAAA,IAAC;MAACI;IAAI,CAAC;IAAA,OAAKA,IAAI,CAACY,WAAW;EAAA,GAAEjB,YAAY,CAAC;;EAEtF;EACAF,SAAS,CAAC,MAAM;IACd,MAAMoB,WAAW,GAAG,YAAY;MAC9B,IAAI;QACF,IAAI,CAACL,UAAU,CAACM,OAAO,EAAE;UACvB,MAAM;YAACC,IAAI,EAAEC;UAAI,CAAC,GAAG,MAAMf,cAAc,EAAE;UAC3CQ,QAAQ,CAACF,KAAK,CAACU,WAAW,CAACD,IAAI,CAAC,CAAC;QACnC;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB,IAAI,CAACV,UAAU,CAACM,OAAO,EAAE;UACvBL,QAAQ,CAACF,KAAK,CAACa,MAAM,EAAE,CAAC;QAC1B;MACF,CAAC,SAAS;QACRT,mBAAmB,CAAC,KAAK,CAAC;MAC5B;MAEA,OAAO,MAAOH,UAAU,CAACM,OAAO,GAAG,IAAK;IAC1C,CAAC;IAED,IAAIF,WAAW,EAAE;MACfC,WAAW,EAAE;IACf,CAAC,MAAM;MACLJ,QAAQ,CAACF,KAAK,CAACa,MAAM,EAAE,CAAC;MACxBT,mBAAmB,CAAC,KAAK,CAAC;IAC5B;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOD,gBAAgB,gBAAG,QAAC,kBAAkB;IAAA;IAAA;IAAA;EAAA,QAAG,gBAAG;IAAA,UAAGH,KAAK,CAACc;EAAQ,iBAAI;AAC1E,CAAC;AAAA,GApCKf,QAA4B;EAAA,QAEfR,WAAW,EAERF,WAAW;AAAA;AAAA,KAJ3BU,QAA4B;AAsClC,qBAAeF,SAAS,CAACE,QAAQ,CAAC;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}