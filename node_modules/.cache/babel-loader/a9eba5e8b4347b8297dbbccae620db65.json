{"ast":null,"code":"import { DataUtil, getUniqueIdWithPrefix, EventHandlerUtil } from '../_utils/index';\n// Helpers\nimport { CookieComponent } from './_CookieComponent';\nconst defaultToggleOptions = {\n  saveState: false\n};\nclass ToggleComponent {\n  constructor(_element, options) {\n    this.element = void 0;\n    this.instanceUid = void 0;\n    this.options = void 0;\n    this.state = '';\n    this.target = null;\n    this.attribute = '';\n    this._handlers = () => {\n      this.element.addEventListener('click', e => {\n        e.preventDefault();\n        this._toggle();\n      });\n    };\n    this._toggle = () => {\n      // Trigger \"after.toggle\" event\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.change');\n      if (this._isEnabled()) {\n        this._disable();\n      } else {\n        this._enable();\n      }\n\n      // Trigger \"before.toggle\" event\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.changed');\n      return this;\n    };\n    this._enable = () => {\n      var _this$target;\n      if (this._isEnabled()) {\n        return;\n      }\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.enable');\n      (_this$target = this.target) === null || _this$target === void 0 ? void 0 : _this$target.setAttribute(this.attribute, 'on');\n      if (this.state.length > 0) {\n        this.element.classList.add(this.state);\n      }\n      if (this.options.saveState) {\n        CookieComponent.set(this.attribute, 'on', {});\n      }\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.enabled');\n      return this;\n    };\n    this._disable = () => {\n      var _this$target2;\n      if (!this._isEnabled()) {\n        return false;\n      }\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.disable');\n      (_this$target2 = this.target) === null || _this$target2 === void 0 ? void 0 : _this$target2.removeAttribute(this.attribute);\n      if (this.state.length > 0) {\n        this.element.classList.remove(this.state);\n      }\n      if (this.options.saveState) {\n        CookieComponent.delete(this.attribute);\n      }\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.disabled');\n      return this;\n    };\n    this._isEnabled = () => {\n      if (!this.target) {\n        return false;\n      }\n      return String(this.target.getAttribute(this.attribute)).toLowerCase() === 'on';\n    };\n    this.toggle = () => {\n      return this._toggle();\n    };\n    this.enable = () => {\n      return this._enable();\n    };\n    this.disable = () => {\n      return this._disable();\n    };\n    this.isEnabled = () => {\n      return this._isEnabled();\n    };\n    this.goElement = () => {\n      return this.element;\n    };\n    this.on = (name, handler) => {\n      return EventHandlerUtil.on(this.element, name, handler);\n    };\n    this.one = (name, handler) => {\n      return EventHandlerUtil.one(this.element, name, handler);\n    };\n    this.off = name => {\n      return EventHandlerUtil.off(this.element, name);\n    };\n    this.trigger = (name, event) => {\n      return EventHandlerUtil.trigger(this.element, name, event);\n    };\n    this.options = Object.assign(defaultToggleOptions, options);\n    this.instanceUid = getUniqueIdWithPrefix('toggle');\n    this.element = _element;\n    const elementTargetAttr = this.element.getAttribute('data-kt-toggle-target');\n    if (elementTargetAttr) {\n      this.target = document.querySelector(elementTargetAttr);\n    }\n    const elementToggleAttr = this.element.getAttribute('data-kt-toggle-state');\n    this.state = elementToggleAttr || '';\n    this.attribute = 'data-kt-' + this.element.getAttribute('data-kt-toggle-name');\n\n    // Event Handlers\n    this._handlers();\n\n    // Update Instance\n    // Bind Instance\n    DataUtil.set(this.element, 'toggle', this);\n  }\n}\nToggleComponent.getInstance = el => {\n  const toggleElement = DataUtil.get(el, 'toggle');\n  if (toggleElement) {\n    return toggleElement;\n  }\n  return null;\n};\nToggleComponent.createInstances = selector => {\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let toggleElement = ToggleComponent.getInstance(item);\n    if (!toggleElement) {\n      toggleElement = new ToggleComponent(item, defaultToggleOptions);\n    }\n  });\n};\nToggleComponent.createInsance = function (selector) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultToggleOptions;\n  const element = document.body.querySelector(selector);\n  if (!element) {\n    return;\n  }\n  const item = element;\n  let toggle = ToggleComponent.getInstance(item);\n  if (!toggle) {\n    toggle = new ToggleComponent(item, options);\n  }\n  return toggle;\n};\nToggleComponent.reinitialization = () => {\n  ToggleComponent.createInstances('[data-kt-toggle]');\n};\nToggleComponent.bootstrap = () => {\n  ToggleComponent.createInstances('[data-kt-toggle]');\n};\nexport { ToggleComponent, defaultToggleOptions };","map":{"version":3,"names":["DataUtil","getUniqueIdWithPrefix","EventHandlerUtil","CookieComponent","defaultToggleOptions","saveState","ToggleComponent","constructor","_element","options","element","instanceUid","state","target","attribute","_handlers","addEventListener","e","preventDefault","_toggle","trigger","_isEnabled","_disable","_enable","setAttribute","length","classList","add","set","removeAttribute","remove","delete","String","getAttribute","toLowerCase","toggle","enable","disable","isEnabled","goElement","on","name","handler","one","off","event","Object","assign","elementTargetAttr","document","querySelector","elementToggleAttr","getInstance","el","toggleElement","get","createInstances","selector","elements","body","querySelectorAll","forEach","item","createInsance","reinitialization","bootstrap"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/src/_metronic/assets/ts/components/_ToggleComponent.ts"],"sourcesContent":["import {DataUtil, getUniqueIdWithPrefix, EventHandlerUtil} from '../_utils/index'\r\n// Helpers\r\nimport {CookieComponent} from './_CookieComponent'\r\n\r\nexport interface ToggleOptions {\r\n  saveState: boolean\r\n  targetState?: string\r\n  toggleState?: string\r\n  targetToggleMode?: string\r\n}\r\n\r\nconst defaultToggleOptions: ToggleOptions = {\r\n  saveState: false,\r\n}\r\n\r\nclass ToggleComponent {\r\n  element: HTMLElement\r\n  instanceUid: string\r\n  options: ToggleOptions\r\n  state: string = ''\r\n  target: HTMLElement | null = null\r\n  attribute: string = ''\r\n\r\n  constructor(_element: HTMLElement, options: ToggleOptions) {\r\n    this.options = Object.assign(defaultToggleOptions, options)\r\n    this.instanceUid = getUniqueIdWithPrefix('toggle')\r\n    this.element = _element\r\n\r\n    const elementTargetAttr = this.element.getAttribute('data-kt-toggle-target')\r\n    if (elementTargetAttr) {\r\n      this.target = document.querySelector(elementTargetAttr)\r\n    }\r\n    const elementToggleAttr = this.element.getAttribute('data-kt-toggle-state')\r\n    this.state = elementToggleAttr || ''\r\n    this.attribute = 'data-kt-' + this.element.getAttribute('data-kt-toggle-name')\r\n\r\n    // Event Handlers\r\n    this._handlers()\r\n\r\n    // Update Instance\r\n    // Bind Instance\r\n    DataUtil.set(this.element, 'toggle', this)\r\n  }\r\n\r\n  private _handlers = () => {\r\n    this.element.addEventListener('click', (e: Event) => {\r\n      e.preventDefault()\r\n      this._toggle()\r\n    })\r\n  }\r\n\r\n  // Event handlers\r\n  private _toggle = () => {\r\n    // Trigger \"after.toggle\" event\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.change')\r\n\r\n    if (this._isEnabled()) {\r\n      this._disable()\r\n    } else {\r\n      this._enable()\r\n    }\r\n\r\n    // Trigger \"before.toggle\" event\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.changed')\r\n    return this\r\n  }\r\n\r\n  private _enable = () => {\r\n    if (this._isEnabled()) {\r\n      return\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.enable')\r\n    this.target?.setAttribute(this.attribute, 'on')\r\n    if (this.state.length > 0) {\r\n      this.element.classList.add(this.state)\r\n    }\r\n\r\n    if (this.options.saveState) {\r\n      CookieComponent.set(this.attribute, 'on', {})\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.enabled')\r\n    return this\r\n  }\r\n\r\n  private _disable = () => {\r\n    if (!this._isEnabled()) {\r\n      return false\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.disable')\r\n    this.target?.removeAttribute(this.attribute)\r\n\r\n    if (this.state.length > 0) {\r\n      this.element.classList.remove(this.state)\r\n    }\r\n\r\n    if (this.options.saveState) {\r\n      CookieComponent.delete(this.attribute)\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.disabled')\r\n    return this\r\n  }\r\n\r\n  private _isEnabled = () => {\r\n    if (!this.target) {\r\n      return false\r\n    }\r\n\r\n    return String(this.target.getAttribute(this.attribute)).toLowerCase() === 'on'\r\n  }\r\n\r\n  ///////////////////////\r\n  // ** Public API  ** //\r\n  ///////////////////////\r\n\r\n  // Plugin API\r\n  // Plugin API\r\n  public toggle = () => {\r\n    return this._toggle()\r\n  }\r\n\r\n  public enable = () => {\r\n    return this._enable()\r\n  }\r\n\r\n  public disable = () => {\r\n    return this._disable()\r\n  }\r\n\r\n  public isEnabled = () => {\r\n    return this._isEnabled()\r\n  }\r\n\r\n  public goElement = () => {\r\n    return this.element\r\n  }\r\n\r\n  // Event API\r\n  public on = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.on(this.element, name, handler)\r\n  }\r\n\r\n  public one = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.one(this.element, name, handler)\r\n  }\r\n\r\n  public off = (name: string) => {\r\n    return EventHandlerUtil.off(this.element, name)\r\n  }\r\n\r\n  public trigger = (name: string, event?: Event) => {\r\n    return EventHandlerUtil.trigger(this.element, name, event)\r\n  }\r\n\r\n  // Static methods\r\n  public static getInstance = (el: HTMLElement) => {\r\n    const toggleElement = DataUtil.get(el, 'toggle')\r\n    if (toggleElement) {\r\n      return toggleElement\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  public static createInstances = (selector: string) => {\r\n    const elements = document.body.querySelectorAll(selector)\r\n    elements.forEach((el) => {\r\n      const item = el as HTMLElement\r\n      let toggleElement = ToggleComponent.getInstance(item)\r\n      if (!toggleElement) {\r\n        toggleElement = new ToggleComponent(item, defaultToggleOptions)\r\n      }\r\n    })\r\n  }\r\n\r\n  public static createInsance = (\r\n    selector: string,\r\n    options: ToggleOptions = defaultToggleOptions\r\n  ): ToggleComponent | undefined => {\r\n    const element = document.body.querySelector(selector)\r\n    if (!element) {\r\n      return\r\n    }\r\n    const item = element as HTMLElement\r\n    let toggle = ToggleComponent.getInstance(item)\r\n    if (!toggle) {\r\n      toggle = new ToggleComponent(item, options)\r\n    }\r\n    return toggle\r\n  }\r\n\r\n  public static reinitialization = () => {\r\n    ToggleComponent.createInstances('[data-kt-toggle]')\r\n  }\r\n\r\n  public static bootstrap = () => {\r\n    ToggleComponent.createInstances('[data-kt-toggle]')\r\n  }\r\n}\r\n\r\nexport {ToggleComponent, defaultToggleOptions}\r\n"],"mappings":"AAAA,SAAQA,QAAQ,EAAEC,qBAAqB,EAAEC,gBAAgB,QAAO,iBAAiB;AACjF;AACA,SAAQC,eAAe,QAAO,oBAAoB;AASlD,MAAMC,oBAAmC,GAAG;EAC1CC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,eAAe,CAAC;EAQpBC,WAAW,CAACC,QAAqB,EAAEC,OAAsB,EAAE;IAAA,KAP3DC,OAAO;IAAA,KACPC,WAAW;IAAA,KACXF,OAAO;IAAA,KACPG,KAAK,GAAW,EAAE;IAAA,KAClBC,MAAM,GAAuB,IAAI;IAAA,KACjCC,SAAS,GAAW,EAAE;IAAA,KAuBdC,SAAS,GAAG,MAAM;MACxB,IAAI,CAACL,OAAO,CAACM,gBAAgB,CAAC,OAAO,EAAGC,CAAQ,IAAK;QACnDA,CAAC,CAACC,cAAc,EAAE;QAClB,IAAI,CAACC,OAAO,EAAE;MAChB,CAAC,CAAC;IACJ,CAAC;IAAA,KAGOA,OAAO,GAAG,MAAM;MACtB;MACAjB,gBAAgB,CAACkB,OAAO,CAAC,IAAI,CAACV,OAAO,EAAE,kBAAkB,CAAC;MAE1D,IAAI,IAAI,CAACW,UAAU,EAAE,EAAE;QACrB,IAAI,CAACC,QAAQ,EAAE;MACjB,CAAC,MAAM;QACL,IAAI,CAACC,OAAO,EAAE;MAChB;;MAEA;MACArB,gBAAgB,CAACkB,OAAO,CAAC,IAAI,CAACV,OAAO,EAAE,mBAAmB,CAAC;MAC3D,OAAO,IAAI;IACb,CAAC;IAAA,KAEOa,OAAO,GAAG,MAAM;MAAA;MACtB,IAAI,IAAI,CAACF,UAAU,EAAE,EAAE;QACrB;MACF;MAEAnB,gBAAgB,CAACkB,OAAO,CAAC,IAAI,CAACV,OAAO,EAAE,kBAAkB,CAAC;MAC1D,oBAAI,CAACG,MAAM,iDAAX,aAAaW,YAAY,CAAC,IAAI,CAACV,SAAS,EAAE,IAAI,CAAC;MAC/C,IAAI,IAAI,CAACF,KAAK,CAACa,MAAM,GAAG,CAAC,EAAE;QACzB,IAAI,CAACf,OAAO,CAACgB,SAAS,CAACC,GAAG,CAAC,IAAI,CAACf,KAAK,CAAC;MACxC;MAEA,IAAI,IAAI,CAACH,OAAO,CAACJ,SAAS,EAAE;QAC1BF,eAAe,CAACyB,GAAG,CAAC,IAAI,CAACd,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MAC/C;MAEAZ,gBAAgB,CAACkB,OAAO,CAAC,IAAI,CAACV,OAAO,EAAE,mBAAmB,CAAC;MAC3D,OAAO,IAAI;IACb,CAAC;IAAA,KAEOY,QAAQ,GAAG,MAAM;MAAA;MACvB,IAAI,CAAC,IAAI,CAACD,UAAU,EAAE,EAAE;QACtB,OAAO,KAAK;MACd;MAEAnB,gBAAgB,CAACkB,OAAO,CAAC,IAAI,CAACV,OAAO,EAAE,mBAAmB,CAAC;MAC3D,qBAAI,CAACG,MAAM,kDAAX,cAAagB,eAAe,CAAC,IAAI,CAACf,SAAS,CAAC;MAE5C,IAAI,IAAI,CAACF,KAAK,CAACa,MAAM,GAAG,CAAC,EAAE;QACzB,IAAI,CAACf,OAAO,CAACgB,SAAS,CAACI,MAAM,CAAC,IAAI,CAAClB,KAAK,CAAC;MAC3C;MAEA,IAAI,IAAI,CAACH,OAAO,CAACJ,SAAS,EAAE;QAC1BF,eAAe,CAAC4B,MAAM,CAAC,IAAI,CAACjB,SAAS,CAAC;MACxC;MAEAZ,gBAAgB,CAACkB,OAAO,CAAC,IAAI,CAACV,OAAO,EAAE,oBAAoB,CAAC;MAC5D,OAAO,IAAI;IACb,CAAC;IAAA,KAEOW,UAAU,GAAG,MAAM;MACzB,IAAI,CAAC,IAAI,CAACR,MAAM,EAAE;QAChB,OAAO,KAAK;MACd;MAEA,OAAOmB,MAAM,CAAC,IAAI,CAACnB,MAAM,CAACoB,YAAY,CAAC,IAAI,CAACnB,SAAS,CAAC,CAAC,CAACoB,WAAW,EAAE,KAAK,IAAI;IAChF,CAAC;IAAA,KAQMC,MAAM,GAAG,MAAM;MACpB,OAAO,IAAI,CAAChB,OAAO,EAAE;IACvB,CAAC;IAAA,KAEMiB,MAAM,GAAG,MAAM;MACpB,OAAO,IAAI,CAACb,OAAO,EAAE;IACvB,CAAC;IAAA,KAEMc,OAAO,GAAG,MAAM;MACrB,OAAO,IAAI,CAACf,QAAQ,EAAE;IACxB,CAAC;IAAA,KAEMgB,SAAS,GAAG,MAAM;MACvB,OAAO,IAAI,CAACjB,UAAU,EAAE;IAC1B,CAAC;IAAA,KAEMkB,SAAS,GAAG,MAAM;MACvB,OAAO,IAAI,CAAC7B,OAAO;IACrB,CAAC;IAAA,KAGM8B,EAAE,GAAG,CAACC,IAAY,EAAEC,OAAiB,KAAK;MAC/C,OAAOxC,gBAAgB,CAACsC,EAAE,CAAC,IAAI,CAAC9B,OAAO,EAAE+B,IAAI,EAAEC,OAAO,CAAC;IACzD,CAAC;IAAA,KAEMC,GAAG,GAAG,CAACF,IAAY,EAAEC,OAAiB,KAAK;MAChD,OAAOxC,gBAAgB,CAACyC,GAAG,CAAC,IAAI,CAACjC,OAAO,EAAE+B,IAAI,EAAEC,OAAO,CAAC;IAC1D,CAAC;IAAA,KAEME,GAAG,GAAIH,IAAY,IAAK;MAC7B,OAAOvC,gBAAgB,CAAC0C,GAAG,CAAC,IAAI,CAAClC,OAAO,EAAE+B,IAAI,CAAC;IACjD,CAAC;IAAA,KAEMrB,OAAO,GAAG,CAACqB,IAAY,EAAEI,KAAa,KAAK;MAChD,OAAO3C,gBAAgB,CAACkB,OAAO,CAAC,IAAI,CAACV,OAAO,EAAE+B,IAAI,EAAEI,KAAK,CAAC;IAC5D,CAAC;IAnIC,IAAI,CAACpC,OAAO,GAAGqC,MAAM,CAACC,MAAM,CAAC3C,oBAAoB,EAAEK,OAAO,CAAC;IAC3D,IAAI,CAACE,WAAW,GAAGV,qBAAqB,CAAC,QAAQ,CAAC;IAClD,IAAI,CAACS,OAAO,GAAGF,QAAQ;IAEvB,MAAMwC,iBAAiB,GAAG,IAAI,CAACtC,OAAO,CAACuB,YAAY,CAAC,uBAAuB,CAAC;IAC5E,IAAIe,iBAAiB,EAAE;MACrB,IAAI,CAACnC,MAAM,GAAGoC,QAAQ,CAACC,aAAa,CAACF,iBAAiB,CAAC;IACzD;IACA,MAAMG,iBAAiB,GAAG,IAAI,CAACzC,OAAO,CAACuB,YAAY,CAAC,sBAAsB,CAAC;IAC3E,IAAI,CAACrB,KAAK,GAAGuC,iBAAiB,IAAI,EAAE;IACpC,IAAI,CAACrC,SAAS,GAAG,UAAU,GAAG,IAAI,CAACJ,OAAO,CAACuB,YAAY,CAAC,qBAAqB,CAAC;;IAE9E;IACA,IAAI,CAAClB,SAAS,EAAE;;IAEhB;IACA;IACAf,QAAQ,CAAC4B,GAAG,CAAC,IAAI,CAAClB,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC;EAC5C;AA+JF;AA1LMJ,eAAe,CA+IL8C,WAAW,GAAIC,EAAe,IAAK;EAC/C,MAAMC,aAAa,GAAGtD,QAAQ,CAACuD,GAAG,CAACF,EAAE,EAAE,QAAQ,CAAC;EAChD,IAAIC,aAAa,EAAE;IACjB,OAAOA,aAAa;EACtB;EAEA,OAAO,IAAI;AACb,CAAC;AAtJGhD,eAAe,CAwJLkD,eAAe,GAAIC,QAAgB,IAAK;EACpD,MAAMC,QAAQ,GAAGT,QAAQ,CAACU,IAAI,CAACC,gBAAgB,CAACH,QAAQ,CAAC;EACzDC,QAAQ,CAACG,OAAO,CAAER,EAAE,IAAK;IACvB,MAAMS,IAAI,GAAGT,EAAiB;IAC9B,IAAIC,aAAa,GAAGhD,eAAe,CAAC8C,WAAW,CAACU,IAAI,CAAC;IACrD,IAAI,CAACR,aAAa,EAAE;MAClBA,aAAa,GAAG,IAAIhD,eAAe,CAACwD,IAAI,EAAE1D,oBAAoB,CAAC;IACjE;EACF,CAAC,CAAC;AACJ,CAAC;AAjKGE,eAAe,CAmKLyD,aAAa,GAAG,UAC5BN,QAAgB,EAEgB;EAAA,IADhChD,OAAsB,uEAAGL,oBAAoB;EAE7C,MAAMM,OAAO,GAAGuC,QAAQ,CAACU,IAAI,CAACT,aAAa,CAACO,QAAQ,CAAC;EACrD,IAAI,CAAC/C,OAAO,EAAE;IACZ;EACF;EACA,MAAMoD,IAAI,GAAGpD,OAAsB;EACnC,IAAIyB,MAAM,GAAG7B,eAAe,CAAC8C,WAAW,CAACU,IAAI,CAAC;EAC9C,IAAI,CAAC3B,MAAM,EAAE;IACXA,MAAM,GAAG,IAAI7B,eAAe,CAACwD,IAAI,EAAErD,OAAO,CAAC;EAC7C;EACA,OAAO0B,MAAM;AACf,CAAC;AAjLG7B,eAAe,CAmLL0D,gBAAgB,GAAG,MAAM;EACrC1D,eAAe,CAACkD,eAAe,CAAC,kBAAkB,CAAC;AACrD,CAAC;AArLGlD,eAAe,CAuLL2D,SAAS,GAAG,MAAM;EAC9B3D,eAAe,CAACkD,eAAe,CAAC,kBAAkB,CAAC;AACrD,CAAC;AAGH,SAAQlD,eAAe,EAAEF,oBAAoB"},"metadata":{},"sourceType":"module"}