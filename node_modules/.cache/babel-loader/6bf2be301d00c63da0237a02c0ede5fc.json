{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadhannan/Downloads/fgfgfg/src/app/routing/Routes.tsx\";\n/**\r\n * High level router.\r\n *\r\n * Note: It's recommended to compose related routes in internal router\r\n * components (e.g: `src/app/modules/Auth/pages/AuthPage`, `src/app/BasePage`).\r\n */\n\nimport React from 'react';\nimport { Redirect, Switch, Route } from 'react-router-dom';\n// import {shallowEqual, useSelector} from 'react-redux'\nimport { MasterLayout } from '../../_metronic/layout/MasterLayout';\nimport { PrivateRoutes } from './PrivateRoutes';\nimport { AuthPage } from '../modules/auth';\nimport { ErrorsPage } from '../modules/errors/ErrorsPage';\n// import {RootState} from '../../setup'\nimport { MasterInit } from '../../_metronic/layout/MasterInit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Routes = () => {\n  const isAuthorized = localStorage.getItem(\"authToken\");\n  const role = localStorage.getItem(\"role\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Switch, {\n      children: [!isAuthorized ?\n      /*#__PURE__*/\n      /*Render auth page when user at `/auth` and not authorized.*/\n      _jsxDEV(Route, {\n        children: /*#__PURE__*/_jsxDEV(AuthPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      /*Otherwise redirect to root page (`/`)*/\n      _jsxDEV(Redirect, {\n        from: \"/auth\",\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/error\",\n        component: ErrorsPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), !isAuthorized ?\n      /*#__PURE__*/\n      /*Redirect to `/auth` when user is not authorized*/\n      _jsxDEV(Redirect, {\n        to: \"/auth/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(MasterLayout, {\n          role: role,\n          children: /*#__PURE__*/_jsxDEV(PrivateRoutes, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MasterInit, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = Routes;\nexport { Routes };\nvar _c;\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"names":["React","Redirect","Switch","Route","MasterLayout","PrivateRoutes","AuthPage","ErrorsPage","MasterInit","Routes","isAuthorized","localStorage","getItem","role"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/src/app/routing/Routes.tsx"],"sourcesContent":["/**\r\n * High level router.\r\n *\r\n * Note: It's recommended to compose related routes in internal router\r\n * components (e.g: `src/app/modules/Auth/pages/AuthPage`, `src/app/BasePage`).\r\n */\r\n\r\nimport React, { FC } from 'react'\r\nimport { Redirect, Switch, Route } from 'react-router-dom'\r\n// import {shallowEqual, useSelector} from 'react-redux'\r\nimport { MasterLayout } from '../../_metronic/layout/MasterLayout'\r\nimport { PrivateRoutes } from './PrivateRoutes'\r\nimport { AuthPage } from '../modules/auth'\r\nimport { ErrorsPage } from '../modules/errors/ErrorsPage'\r\n// import {RootState} from '../../setup'\r\nimport { MasterInit } from '../../_metronic/layout/MasterInit'\r\n\r\nconst Routes: FC = () => {\r\n  const isAuthorized = localStorage.getItem(\"authToken\")\r\n  const role = localStorage.getItem(\"role\")\r\n  return (\r\n    <>\r\n      <Switch>\r\n\r\n        {!isAuthorized ? (\r\n          /*Render auth page when user at `/auth` and not authorized.*/\r\n          <Route>\r\n            <AuthPage />\r\n          </Route>\r\n        ) : (\r\n          /*Otherwise redirect to root page (`/`)*/\r\n          <Redirect from='/auth' to='/' />\r\n        )}\r\n\r\n\r\n        <Route path='/error' component={ErrorsPage} />\r\n\r\n        {!isAuthorized ? (\r\n          /*Redirect to `/auth` when user is not authorized*/\r\n          <Redirect to='/auth/login' />\r\n\r\n        ) : (\r\n          <>\r\n            <MasterLayout role={role}>\r\n              <PrivateRoutes />\r\n            </MasterLayout>\r\n          </>\r\n        )}\r\n      </Switch>\r\n      <MasterInit />\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Routes }\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAc,OAAO;AACjC,SAASC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAC1D;AACA,SAASC,YAAY,QAAQ,qCAAqC;AAClE,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,UAAU,QAAQ,8BAA8B;AACzD;AACA,SAASC,UAAU,QAAQ,mCAAmC;AAAA;AAAA;AAE9D,MAAMC,MAAU,GAAG,MAAM;EACvB,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACtD,MAAMC,IAAI,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACzC,oBACE;IAAA,wBACE,QAAC,MAAM;MAAA,WAEJ,CAACF,YAAY;MAAA;MACZ;MACA,QAAC,KAAK;QAAA,uBACJ,QAAC,QAAQ;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QACN;MAAA;MAER;MACA,QAAC,QAAQ;QAAC,IAAI,EAAC,OAAO;QAAC,EAAE,EAAC;MAAG;QAAA;QAAA;QAAA;MAAA,QAC9B,eAGD,QAAC,KAAK;QAAC,IAAI,EAAC,QAAQ;QAAC,SAAS,EAAEH;MAAW;QAAA;QAAA;QAAA;MAAA,QAAG,EAE7C,CAACG,YAAY;MAAA;MACZ;MACA,QAAC,QAAQ;QAAC,EAAE,EAAC;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG,gBAG7B;QAAA,uBACE,QAAC,YAAY;UAAC,IAAI,EAAEG,IAAK;UAAA,uBACvB,QAAC,aAAa;YAAA;YAAA;YAAA;UAAA;QAAG;UAAA;UAAA;UAAA;QAAA;MACJ,iBAElB;IAAA;MAAA;MAAA;MAAA;IAAA,QACM,eACT,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA,gBACb;AAEP,CAAC;AAAA,KAnCKJ,MAAU;AAqChB,SAASA,MAAM;AAAE;AAAA"},"metadata":{},"sourceType":"module"}