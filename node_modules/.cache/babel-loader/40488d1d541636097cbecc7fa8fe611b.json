{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const GET_USER_BY_ACCESSTOKEN_URL = `${API_URL}/verify_token`;\nexport const LOGIN_URL = `${API_URL}/login`;\nexport const REGISTER_URL = `${API_URL}/register`;\nexport const REQUEST_PASSWORD_URL = `${API_URL}/forgot_password`;\n\n// Server should return AuthModel\nexport function login(email, password) {\n  return axios.get(LOGIN_URL, {\n    params: {\n      email: email,\n      password: password\n    }\n  });\n}\n\n// Server should return AuthModel\nexport function register(email, firstname, lastname, password, password_confirmation) {\n  return axios.post(REGISTER_URL, {\n    email,\n    first_name: firstname,\n    last_name: lastname,\n    password,\n    password_confirmation\n  });\n}\n\n// Server should return object => { result: boolean } (Is Email in DB)\nexport function requestPassword(email) {\n  return axios.get(REQUEST_PASSWORD_URL, {\n    params: {\n      email: email\n    }\n  });\n}\nexport function getUserByToken() {\n  // Authorization head should be fulfilled in interceptor.\n  // Check common redux folder => setupAxios\n  return axios.get(GET_USER_BY_ACCESSTOKEN_URL);\n}","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","GET_USER_BY_ACCESSTOKEN_URL","LOGIN_URL","REGISTER_URL","REQUEST_PASSWORD_URL","login","email","password","get","params","register","firstname","lastname","password_confirmation","post","first_name","last_name","requestPassword","getUserByToken"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/src/app/modules/auth/redux/AuthCRUD.ts"],"sourcesContent":["import axios from 'axios'\r\nimport { AuthModel } from '../models/AuthModel'\r\nimport { UserModel } from '../models/UserModel'\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nexport const GET_USER_BY_ACCESSTOKEN_URL = `${API_URL}/verify_token`\r\nexport const LOGIN_URL = `${API_URL}/login`\r\nexport const REGISTER_URL = `${API_URL}/register`\r\nexport const REQUEST_PASSWORD_URL = `${API_URL}/forgot_password`\r\n\r\n// Server should return AuthModel\r\nexport function login(email: string, password: string) {\r\n  return axios.get(LOGIN_URL, {\r\n    params: {\r\n      email: email,\r\n      password: password,\r\n    },\r\n  })\r\n}\r\n\r\n// Server should return AuthModel\r\nexport function register(email: string, firstname: string, lastname: string, password: string, password_confirmation: string) {\r\n  return axios.post<AuthModel>(REGISTER_URL, {\r\n    email,\r\n    first_name: firstname,\r\n    last_name: lastname,\r\n    password,\r\n    password_confirmation\r\n  })\r\n}\r\n\r\n// Server should return object => { result: boolean } (Is Email in DB)\r\nexport function requestPassword(email: string) {\r\n  return axios.get<{ result: boolean }>(REQUEST_PASSWORD_URL, {\r\n    params: {\r\n      email: email,\r\n    },\r\n  })\r\n}\r\n\r\nexport function getUserByToken() {\r\n  // Authorization head should be fulfilled in interceptor.\r\n  // Check common redux folder => setupAxios\r\n  return axios.get<UserModel>(GET_USER_BY_ACCESSTOKEN_URL)\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAIzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,MAAMC,2BAA2B,GAAI,GAAEJ,OAAQ,eAAc;AACpE,OAAO,MAAMK,SAAS,GAAI,GAAEL,OAAQ,QAAO;AAC3C,OAAO,MAAMM,YAAY,GAAI,GAAEN,OAAQ,WAAU;AACjD,OAAO,MAAMO,oBAAoB,GAAI,GAAEP,OAAQ,kBAAiB;;AAEhE;AACA,OAAO,SAASQ,KAAK,CAACC,KAAa,EAAEC,QAAgB,EAAE;EACrD,OAAOX,KAAK,CAACY,GAAG,CAACN,SAAS,EAAE;IAC1BO,MAAM,EAAE;MACNH,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ;EACF,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASG,QAAQ,CAACJ,KAAa,EAAEK,SAAiB,EAAEC,QAAgB,EAAEL,QAAgB,EAAEM,qBAA6B,EAAE;EAC5H,OAAOjB,KAAK,CAACkB,IAAI,CAAYX,YAAY,EAAE;IACzCG,KAAK;IACLS,UAAU,EAAEJ,SAAS;IACrBK,SAAS,EAAEJ,QAAQ;IACnBL,QAAQ;IACRM;EACF,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASI,eAAe,CAACX,KAAa,EAAE;EAC7C,OAAOV,KAAK,CAACY,GAAG,CAAsBJ,oBAAoB,EAAE;IAC1DK,MAAM,EAAE;MACNH,KAAK,EAAEA;IACT;EACF,CAAC,CAAC;AACJ;AAEA,OAAO,SAASY,cAAc,GAAG;EAC/B;EACA;EACA,OAAOtB,KAAK,CAACY,GAAG,CAAYP,2BAA2B,CAAC;AAC1D"},"metadata":{},"sourceType":"module"}