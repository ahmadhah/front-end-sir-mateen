{"ast":null,"code":"import { DataUtil } from './_DataUtil';\nimport { getUniqueIdWithPrefix } from './_TypesHelpers';\nexport class EventHandlerUtil {\n  static setEventMetasByName(name, metas) {\n    EventHandlerUtil.store.set(name, metas);\n  }\n  static getEventMetasByName(name) {\n    return EventHandlerUtil.store.get(name);\n  }\n  static setEventMetaByNameAndHandlerId(name, handlerId, meta) {\n    let metas = EventHandlerUtil.getEventMetasByName(name);\n    if (!metas) {\n      metas = new Map();\n    }\n    metas.set(handlerId, meta);\n    EventHandlerUtil.setEventMetasByName(name, metas);\n  }\n  static getEventsMetaByHandlerId(name, handlerId) {\n    const metas = EventHandlerUtil.store.get(name);\n    if (!metas) {\n      return;\n    }\n    return metas.get(handlerId);\n  }\n  static setFiredByNameAndHandlerId(name, handerId, fired) {\n    const meta = EventHandlerUtil.getEventsMetaByHandlerId(name, handerId);\n    if (!meta) {\n      return;\n    }\n    meta.fired = fired;\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handerId, meta);\n  }\n  static addEvent(element, name, callback) {\n    let one = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const handlerId = getUniqueIdWithPrefix('event');\n    DataUtil.set(element, name, handlerId);\n    const meta = {\n      name: name,\n      callback: callback,\n      one: one,\n      fired: false\n    };\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handlerId, meta);\n  }\n  static removeEvent(element, name) {\n    const handlerId = DataUtil.get(element, name);\n    if (!handlerId) {\n      return;\n    }\n    const metas = EventHandlerUtil.getEventMetasByName(name);\n    if (!metas) {\n      return;\n    }\n    metas.delete(handlerId);\n    EventHandlerUtil.setEventMetasByName(name, metas);\n  }\n  static trigger(element, name, target, e) {\n    if (DataUtil.has(element, name)) {\n      const handlerId = DataUtil.get(element, name);\n      if (!handlerId) {\n        return undefined;\n      }\n      const handler = EventHandlerUtil.getEventsMetaByHandlerId(name, handlerId);\n      if (handler) {\n        if (handler.name === name) {\n          if (handler.one === true) {\n            if (handler.fired === false) {\n              EventHandlerUtil.setFiredByNameAndHandlerId(name, handlerId, true);\n              return handler.callback.call(this, target, e);\n            }\n          } else {\n            return handler.callback.call(this, target, e);\n          }\n        }\n      }\n    }\n    return null;\n  }\n  static one(element, name, callBack) {\n    EventHandlerUtil.addEvent(element, name, callBack, true);\n  }\n  static off(element, name) {\n    EventHandlerUtil.removeEvent(element, name);\n  }\n}\nEventHandlerUtil.store = new Map();\nEventHandlerUtil.on = function (element, name, callBack) {\n  EventHandlerUtil.addEvent(element, name, callBack, false);\n};","map":{"version":3,"names":["DataUtil","getUniqueIdWithPrefix","EventHandlerUtil","setEventMetasByName","name","metas","store","set","getEventMetasByName","get","setEventMetaByNameAndHandlerId","handlerId","meta","Map","getEventsMetaByHandlerId","setFiredByNameAndHandlerId","handerId","fired","addEvent","element","callback","one","removeEvent","delete","trigger","target","e","has","undefined","handler","call","callBack","off","on"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/src/_metronic/assets/ts/_utils/EventHandlerUtil.ts"],"sourcesContent":["import {DataUtil} from './_DataUtil'\r\nimport {getUniqueIdWithPrefix} from './_TypesHelpers'\r\n\r\nexport interface EventMeta {\r\n  name: string\r\n  callback: Function\r\n  one: boolean\r\n  fired: boolean\r\n}\r\n\r\nexport class EventHandlerUtil {\r\n  static store: Map<string, Map<string, EventMeta>> = new Map()\r\n\r\n  private static setEventMetasByName(name: string, metas: Map<string, EventMeta>): void {\r\n    EventHandlerUtil.store.set(name, metas)\r\n  }\r\n\r\n  private static getEventMetasByName(name: string): Map<string, EventMeta> | undefined {\r\n    return EventHandlerUtil.store.get(name)\r\n  }\r\n\r\n  private static setEventMetaByNameAndHandlerId(\r\n    name: string,\r\n    handlerId: string,\r\n    meta: EventMeta\r\n  ): void {\r\n    let metas = EventHandlerUtil.getEventMetasByName(name)\r\n    if (!metas) {\r\n      metas = new Map()\r\n    }\r\n\r\n    metas.set(handlerId, meta)\r\n    EventHandlerUtil.setEventMetasByName(name, metas)\r\n  }\r\n\r\n  private static getEventsMetaByHandlerId(name: string, handlerId: string): EventMeta | undefined {\r\n    const metas = EventHandlerUtil.store.get(name)\r\n    if (!metas) {\r\n      return\r\n    }\r\n\r\n    return metas.get(handlerId)\r\n  }\r\n\r\n  private static setFiredByNameAndHandlerId(name: string, handerId: string, fired: boolean): void {\r\n    const meta = EventHandlerUtil.getEventsMetaByHandlerId(name, handerId)\r\n    if (!meta) {\r\n      return\r\n    }\r\n\r\n    meta.fired = fired\r\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handerId, meta)\r\n  }\r\n\r\n  private static addEvent(\r\n    element: HTMLElement,\r\n    name: string,\r\n    callback: Function,\r\n    one: boolean = false\r\n  ) {\r\n    const handlerId = getUniqueIdWithPrefix('event')\r\n    DataUtil.set(element, name, handlerId)\r\n    const meta: EventMeta = {\r\n      name: name,\r\n      callback: callback,\r\n      one: one,\r\n      fired: false,\r\n    }\r\n\r\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handlerId, meta)\r\n  }\r\n\r\n  private static removeEvent(element: HTMLElement, name: string) {\r\n    const handlerId = DataUtil.get(element, name)\r\n    if (!handlerId) {\r\n      return\r\n    }\r\n\r\n    const metas = EventHandlerUtil.getEventMetasByName(name)\r\n    if (!metas) {\r\n      return\r\n    }\r\n\r\n    metas.delete(handlerId)\r\n    EventHandlerUtil.setEventMetasByName(name, metas)\r\n  }\r\n\r\n  public static trigger(element: HTMLElement, name: string, target?: any, e?: Event) {\r\n    if (DataUtil.has(element, name)) {\r\n      const handlerId = DataUtil.get(element, name)\r\n      if (!handlerId) {\r\n        return undefined\r\n      }\r\n\r\n      const handler = EventHandlerUtil.getEventsMetaByHandlerId(name, handlerId)\r\n      if (handler) {\r\n        if (handler.name === name) {\r\n          if (handler.one === true) {\r\n            if (handler.fired === false) {\r\n              EventHandlerUtil.setFiredByNameAndHandlerId(name, handlerId, true)\r\n              return handler.callback.call(this, target, e)\r\n            }\r\n          } else {\r\n            return handler.callback.call(this, target, e)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  public static on = function (element: HTMLElement, name: string, callBack: Function): void {\r\n    EventHandlerUtil.addEvent(element, name, callBack, false)\r\n  }\r\n\r\n  public static one(element: HTMLElement, name: string, callBack: Function): void {\r\n    EventHandlerUtil.addEvent(element, name, callBack, true)\r\n  }\r\n\r\n  public static off(element: HTMLElement, name: string): void {\r\n    EventHandlerUtil.removeEvent(element, name)\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}