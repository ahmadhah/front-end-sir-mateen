{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BestFitMatcher = void 0;\nvar BestAvailableLocale_1 = require(\"./BestAvailableLocale\");\nvar utils_1 = require(\"./utils\");\n/**\n * https://tc39.es/ecma402/#sec-bestfitmatcher\n * @param availableLocales\n * @param requestedLocales\n * @param getDefaultLocale\n */\nfunction BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {\n  var minimizedAvailableLocaleMap = {};\n  var availableLocaleMap = {};\n  var canonicalizedLocaleMap = {};\n  var minimizedAvailableLocales = new Set();\n  availableLocales.forEach(function (locale) {\n    var minimizedLocale = new Intl.Locale(locale).minimize().toString();\n    var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;\n    minimizedAvailableLocaleMap[minimizedLocale] = locale;\n    availableLocaleMap[locale] = locale;\n    canonicalizedLocaleMap[canonicalizedLocale] = locale;\n    minimizedAvailableLocales.add(minimizedLocale);\n    minimizedAvailableLocales.add(locale);\n    minimizedAvailableLocales.add(canonicalizedLocale);\n  });\n  var foundLocale;\n  for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {\n    var l = requestedLocales_1[_i];\n    if (foundLocale) {\n      break;\n    }\n    var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');\n    if (availableLocales.has(noExtensionLocale)) {\n      foundLocale = noExtensionLocale;\n      break;\n    }\n    if (minimizedAvailableLocales.has(noExtensionLocale)) {\n      foundLocale = noExtensionLocale;\n      break;\n    }\n    var locale = new Intl.Locale(noExtensionLocale);\n    var maximizedRequestedLocale = locale.maximize().toString();\n    var minimizedRequestedLocale = locale.minimize().toString();\n    // Check minimized locale\n    if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {\n      foundLocale = minimizedRequestedLocale;\n      break;\n    }\n    // Lookup algo on maximized locale\n    foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);\n  }\n  if (!foundLocale) {\n    return {\n      locale: getDefaultLocale()\n    };\n  }\n  return {\n    locale: availableLocaleMap[foundLocale] || canonicalizedLocaleMap[foundLocale] || minimizedAvailableLocaleMap[foundLocale] || foundLocale\n  };\n}\nexports.BestFitMatcher = BestFitMatcher;","map":{"version":3,"names":["Object","defineProperty","exports","value","BestFitMatcher","BestAvailableLocale_1","require","utils_1","availableLocales","requestedLocales","getDefaultLocale","minimizedAvailableLocaleMap","availableLocaleMap","canonicalizedLocaleMap","minimizedAvailableLocales","Set","forEach","locale","minimizedLocale","Intl","Locale","minimize","toString","canonicalizedLocale","getCanonicalLocales","add","foundLocale","_i","requestedLocales_1","length","l","noExtensionLocale","replace","UNICODE_EXTENSION_SEQUENCE_REGEX","has","maximizedRequestedLocale","maximize","minimizedRequestedLocale","BestAvailableLocale"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/node_modules/@formatjs/intl-relativetimeformat/node_modules/@formatjs/intl-localematcher/abstract/BestFitMatcher.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BestFitMatcher = void 0;\nvar BestAvailableLocale_1 = require(\"./BestAvailableLocale\");\nvar utils_1 = require(\"./utils\");\n/**\n * https://tc39.es/ecma402/#sec-bestfitmatcher\n * @param availableLocales\n * @param requestedLocales\n * @param getDefaultLocale\n */\nfunction BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {\n    var minimizedAvailableLocaleMap = {};\n    var availableLocaleMap = {};\n    var canonicalizedLocaleMap = {};\n    var minimizedAvailableLocales = new Set();\n    availableLocales.forEach(function (locale) {\n        var minimizedLocale = new Intl.Locale(locale)\n            .minimize()\n            .toString();\n        var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;\n        minimizedAvailableLocaleMap[minimizedLocale] = locale;\n        availableLocaleMap[locale] = locale;\n        canonicalizedLocaleMap[canonicalizedLocale] = locale;\n        minimizedAvailableLocales.add(minimizedLocale);\n        minimizedAvailableLocales.add(locale);\n        minimizedAvailableLocales.add(canonicalizedLocale);\n    });\n    var foundLocale;\n    for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {\n        var l = requestedLocales_1[_i];\n        if (foundLocale) {\n            break;\n        }\n        var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');\n        if (availableLocales.has(noExtensionLocale)) {\n            foundLocale = noExtensionLocale;\n            break;\n        }\n        if (minimizedAvailableLocales.has(noExtensionLocale)) {\n            foundLocale = noExtensionLocale;\n            break;\n        }\n        var locale = new Intl.Locale(noExtensionLocale);\n        var maximizedRequestedLocale = locale.maximize().toString();\n        var minimizedRequestedLocale = locale.minimize().toString();\n        // Check minimized locale\n        if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {\n            foundLocale = minimizedRequestedLocale;\n            break;\n        }\n        // Lookup algo on maximized locale\n        foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);\n    }\n    if (!foundLocale) {\n        return { locale: getDefaultLocale() };\n    }\n    return {\n        locale: availableLocaleMap[foundLocale] ||\n            canonicalizedLocaleMap[foundLocale] ||\n            minimizedAvailableLocaleMap[foundLocale] ||\n            foundLocale,\n    };\n}\nexports.BestFitMatcher = BestFitMatcher;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}