{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadhannan/Downloads/fgfgfg/src/_metronic/i18n/Metronici18n.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst I18N_CONFIG_KEY = process.env.REACT_APP_I18N_CONFIG_KEY || 'i18nConfig';\nconst initialState = {\n  selectedLang: 'en'\n};\nfunction getConfig() {\n  const ls = localStorage.getItem(I18N_CONFIG_KEY);\n  if (ls) {\n    try {\n      return JSON.parse(ls);\n    } catch (er) {\n      console.error(er);\n    }\n  }\n  return initialState;\n}\n\n// Side effect\nexport function setLanguage(lang) {\n  localStorage.setItem(I18N_CONFIG_KEY, JSON.stringify({\n    selectedLang: lang\n  }));\n  window.location.reload();\n}\nconst I18nContext = /*#__PURE__*/createContext(initialState);\nconst useLang = () => {\n  _s();\n  return useContext(I18nContext).selectedLang;\n};\n_s(useLang, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst MetronicI18nProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const lang = getConfig();\n  return /*#__PURE__*/_jsxDEV(I18nContext.Provider, {\n    value: lang,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n};\n_c = MetronicI18nProvider;\nexport { MetronicI18nProvider, useLang };\nvar _c;\n$RefreshReg$(_c, \"MetronicI18nProvider\");","map":{"version":3,"names":["React","createContext","useContext","I18N_CONFIG_KEY","process","env","REACT_APP_I18N_CONFIG_KEY","initialState","selectedLang","getConfig","ls","localStorage","getItem","JSON","parse","er","console","error","setLanguage","lang","setItem","stringify","window","location","reload","I18nContext","useLang","MetronicI18nProvider","children"],"sources":["/Users/ahmadhannan/Downloads/fgfgfg/src/_metronic/i18n/Metronici18n.tsx"],"sourcesContent":["import React, {FC, createContext, useContext} from 'react'\r\n\r\nconst I18N_CONFIG_KEY = process.env.REACT_APP_I18N_CONFIG_KEY || 'i18nConfig'\r\n\r\ntype Props = {\r\n  selectedLang: 'de' | 'en' | 'es' | 'fr' | 'ja' | 'zh'\r\n}\r\nconst initialState: Props = {\r\n  selectedLang: 'en',\r\n}\r\n\r\nfunction getConfig(): Props {\r\n  const ls = localStorage.getItem(I18N_CONFIG_KEY)\r\n  if (ls) {\r\n    try {\r\n      return JSON.parse(ls) as Props\r\n    } catch (er) {\r\n      console.error(er)\r\n    }\r\n  }\r\n  return initialState\r\n}\r\n\r\n// Side effect\r\nexport function setLanguage(lang: string) {\r\n  localStorage.setItem(I18N_CONFIG_KEY, JSON.stringify({selectedLang: lang}))\r\n  window.location.reload()\r\n}\r\n\r\nconst I18nContext = createContext<Props>(initialState)\r\n\r\nconst useLang = () => {\r\n  return useContext(I18nContext).selectedLang\r\n}\r\n\r\nconst MetronicI18nProvider: FC = ({children}) => {\r\n  const lang = getConfig()\r\n  return <I18nContext.Provider value={lang}>{children}</I18nContext.Provider>\r\n}\r\n\r\nexport {MetronicI18nProvider, useLang}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAOC,aAAa,EAAEC,UAAU,QAAO,OAAO;AAAA;AAE1D,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB,IAAI,YAAY;AAK7E,MAAMC,YAAmB,GAAG;EAC1BC,YAAY,EAAE;AAChB,CAAC;AAED,SAASC,SAAS,GAAU;EAC1B,MAAMC,EAAE,GAAGC,YAAY,CAACC,OAAO,CAACT,eAAe,CAAC;EAChD,IAAIO,EAAE,EAAE;IACN,IAAI;MACF,OAAOG,IAAI,CAACC,KAAK,CAACJ,EAAE,CAAC;IACvB,CAAC,CAAC,OAAOK,EAAE,EAAE;MACXC,OAAO,CAACC,KAAK,CAACF,EAAE,CAAC;IACnB;EACF;EACA,OAAOR,YAAY;AACrB;;AAEA;AACA,OAAO,SAASW,WAAW,CAACC,IAAY,EAAE;EACxCR,YAAY,CAACS,OAAO,CAACjB,eAAe,EAAEU,IAAI,CAACQ,SAAS,CAAC;IAACb,YAAY,EAAEW;EAAI,CAAC,CAAC,CAAC;EAC3EG,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;AAC1B;AAEA,MAAMC,WAAW,gBAAGxB,aAAa,CAAQM,YAAY,CAAC;AAEtD,MAAMmB,OAAO,GAAG,MAAM;EAAA;EACpB,OAAOxB,UAAU,CAACuB,WAAW,CAAC,CAACjB,YAAY;AAC7C,CAAC;AAAA,GAFKkB,OAAO;AAIb,MAAMC,oBAAwB,GAAG,QAAgB;EAAA,IAAf;IAACC;EAAQ,CAAC;EAC1C,MAAMT,IAAI,GAAGV,SAAS,EAAE;EACxB,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEU,IAAK;IAAA,UAAES;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AAC7E,CAAC;AAAA,KAHKD,oBAAwB;AAK9B,SAAQA,oBAAoB,EAAED,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module"}